                    resources - What is the single most influential book every programmer should read? - Stack Overflow
Stack Exchange log in | careers 2.0 | chat | meta | about | faq 
Stack Overflow   •  Questions
  •  Tags
  •  Users
  •  Badges
  •  Unanswered
  •   Ask Question 
What is the single most influential book every programmer should read? [closed]
  true    1711  up vote 1440 down vote favorite 4160 	If you could go back in time and tell yourself to read a specific book at the beginning of your career as a developer, which book would it be?
I expect this list to be varied and to cover a wide range of things.
To search: Use the search box in the upper-right corner. To search the answers of the current question, use inquestion:this. For example:
inquestion:this "Code Complete"
books resources reading 	
share 	 edited Sep 26 '11 at 15:39 
	 community wiki 
 17 revs, 13 users 33%
Bert F 	
		
	
268 	   	
One of the most important question ever asked on stackoverflow :) – Sylvain Jun 9 '09 at 19:30	
	
8 	   	
Browsing this thread make me realize how ugly most programming related books are. Very good thread though! – Carl Bergquist Aug 5 '09 at 12:09	
	
23 	   	
Interesting this is, while the title reads "What is the single most influential book every programmer should read?", there are quite a few books suggested that deal with language specific topics. By definition, and by question as it was put, the books suggested here should deal with language agnostic topics, which proves most programmers have yet to learn how to read. – ldigas Oct 2 '09 at 19:54	
	
19 	   	
If I could go back in time and tell myself to read something, it better be a newspaper or sports fact book that I carried with me. Anything else is a waste of good time travel. :-) – jmucchiello Nov 8 '09 at 9:38	
	
32 	   	
You know, if I wasn't worried about getting down voted a WHOLE lot I would trollishly go and suggest Twilight. "Its ALSO about people who are pale and avoid the sun!" – Jacob Bellamy Feb 12 '10 at 0:20	
show 30 more comments  feedback locked by Jarrod Dixon♦ Mar 2 '12 at 19:26
This question exists because it has historical significance, but it is not considered a good, on-topic question for this site, so please do not use it as evidence that you can ask similar questions here. This question and its answers are frozen and cannot be changed. More info: FAQ.
closed as not constructive by casperOne♦ Jan 11 '12 at 13:32
As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references, or specific expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question can be improved and possibly reopened, see the FAQ for guidance.
 213 Answers 
active oldest votes 1 2 3 4 5 … 8  next   1713  up vote 1754 down vote 	  •  Code Complete (2nd edition) by Steve McConnell
  •  The Pragmatic Programmer
  •  Structure and Interpretation of Computer Programs
  •  The C Programming Language by Kernighan and Ritchie
  •  Introduction to Algorithms by Cormen, Leiserson, Rivest & Stein
  •  Design Patterns by the Gang of Four
  •  Refactoring: Improving the Design of Existing Code
  •  The Mythical Man Month
  •  The Art of Computer Programming by Donald Knuth
  •  Compilers: Principles, Techniques and Tools by Alfred V. Aho, Ravi Sethi and Jeffrey D. Ullman
  •  Gödel, Escher, Bach by Douglas Hofstadter
  •  Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin
  •  Effective C++
  •  More Effective C++
  •  CODE by Charles Petzold
  •  Programming Pearls by Jon Bentley
  •  Working Effectively with Legacy Code by Michael C. Feathers
  •  Peopleware by Demarco and Lister
  •  Coders at Work by Peter Seibel
  •  Surely You're Joking, Mr. Feynman!
  •  Effective Java 2nd edition
  •  Patterns of Enterprise Application Architecture by Martin Fowler
  •  The Little Schemer
  •  The Seasoned Schemer
  •  Why's (Poignant) Guide to Ruby
  •  The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity
  •  The Art of Unix Programming
  •  Test-Driven Development: By Example by Kent Beck
  •  Practices of an Agile Developer
  •  Don't Make Me Think
  •  Agile Software Development, Principles, Patterns, and Practices by Robert C. Martin
  •  Domain Driven Designs by Eric Evans
  •  The Design of Everyday Things by Donald Norman
  •  Modern C++ Design by Andrei Alexandrescu
  •  Best Software Writing I by Joel Spolsky
  •  The Practice of Programming by Kernighan and Pike
  •  Pragmatic Thinking and Learning: Refactor Your Wetware by Andy Hunt
  •  Software Estimation: Demystifying the Black Art by Steve McConnel
  •  The Passionate Programmer (My Job Went To India) by Chad Fowler
  •  Hackers: Heroes of the Computer Revolution
  •  Algorithms + Data Structures = Programs
  •  Writing Solid Code
  •  JavaScript - The Good Parts
  •  Getting Real by 37 Signals
  •  Foundations of Programming by Karl Seguin
  •  Computer Graphics: Principles and Practice in C (2nd Edition)
  •  Thinking in Java by Bruce Eckel
  •  The Elements of Computing Systems
  •  Refactoring to Patterns by Joshua Kerievsky
  •  Modern Operating Systems by Andrew S. Tanenbaum
  •  The Annotated Turing
  •  Things That Make Us Smart by Donald Norman
  •  The Timeless Way of Building by Christopher Alexander
  •  The Deadline: A Novel About Project Management by Tom DeMarco
  •  The C++ Programming Language (3rd edition) by Stroustrup
  •  Patterns of Enterprise Application Architecture
  •  Computer Systems - A Programmer's Perspective
  •  Agile Principles, Patterns, and Practices in C# by Robert C. Martin
  •  Growing Object-Oriented Software, Guided by Tests
  •  Framework Design Guidelines by Brad Abrams
  •  Object Thinking by Dr. David West
  •  Advanced Programming in the UNIX Environment by W. Richard Stevens
  •  Hackers and Painters: Big Ideas from the Computer Age
  •  The Soul of a New Machine by Tracy Kidder
  •  CLR via C# by Jeffrey Richter
  •  The Timeless Way of Building by Christopher Alexander
  •  Design Patterns in C# by Steve Metsker
  •  Alice in Wonderland by Lewis Carol
  •  Zen and the Art of Motorcycle Maintenance by Robert M. Pirsig
  •  About Face - The Essentials of Interaction Design
  •  Here Comes Everybody: The Power of Organizing Without Organizations by Clay Shirky
  •  The Tao of Programming
  •  Computational Beauty of Nature
  •  Writing Solid Code by Steve Maguire
  •  Philip and Alex's Guide to Web Publishing
  •  Object-Oriented Analysis and Design with Applications by Grady Booch
  •  Effective Java by Joshua Bloch
  •  Computability by N. J. Cutland
  •  Masterminds of Programming
  •  The Tao Te Ching
  •  The Productive Programmer
  •  The Art of Deception by Kevin Mitnick
  •  The Career Programmer: Guerilla Tactics for an Imperfect World by Christopher Duncan
  •  Paradigms of Artificial Intelligence Programming: Case studies in Common Lisp
  •  Masters of Doom
  •  Pragmatic Unit Testing in C# with NUnit by Andy Hunt and Dave Thomas with Matt Hargett
  •  How To Solve It by George Polya
  •  The Alchemist by Paulo Coelho
  •  Smalltalk-80: The Language and its Implementation
  •  Writing Secure Code (2nd Edition) by Michael Howard
  •  Introduction to Functional Programming by Philip Wadler and Richard Bird
  •  No Bugs! by David Thielen 
  •  Rework by Jason Freid and DHH
  •  JUnit in Action
	
share 	 edited Feb 21 '12 at 21:02 
	 community wiki 
 9 revs, 8 users 83%
random 	
		
	
108 	   	
You should already know everything in this book. Really. – Tim Williscroft Jan 12 '09 at 6:22	
	
416 	   	
Everyone always recommends this book, but no one ever says why, which leaves me with the opinion that everyone must have been brainwashed. :P – chaiguy Jan 17 '09 at 3:19	
	
76 	   	
I read this book 3 years into my career. I hadn't taken a software engineering course nor a programming language constructs course but had taken some intro CS courses. It is by far the best single book I've ever read for becoming a better programmer. It won't make you a specialist but it will make you much more than a tinkerer. – Arnshea Apr 25 '09 at 16:11	
	
119 	   	
The problem with this book is that for a beginner, it doesn't really make sense as the concepts are a little advanced. By the time you are ready to be able to read it, you should already know and practice 99% of the concepts in the book. – esac Apr 30 '09 at 1:46	
	
57 	   	
That's the deal with common sense suggestions, like those found in this book. Every so often you need to be reminded of them to fall back in line. – JohnFx Jun 17 '09 at 15:56	
show 52 more comments  feedback   20987  up vote 9 down vote 	K&R
@Juan: I know Juan, I know - but there are some things that can only be learned by actually getting down to the task at hand. Speaking in abstract ideals all day simply makes you into an academic. It's in the application of the abstract that we truly grok the reason for their existence. :P
@Keith: Great mention of "The Inmates are Running the Asylum" by Alan Cooper - an eye opener for certain, any developer that has worked with me since I read that book has heard me mention the ideas it espouses. +1
	
share 	 edited Aug 21 '08 at 20:06 
	 community wiki 
 2 revs
Jason Bunting 	
		
		
 feedback   200877  up vote 9 down vote 	  Discrete Mathematics For Computer Scientists  
Discrete Mathematics For Computer Scientists by J.K. Truss.
While this doesn't teach you programming, it teaches you fundamental mathematics that every programmer should know. You may remember this stuff from university, but really, doing predicate logic will improve you programming skills, you need to learn Set Theory if you want to program using collections.
There really is a lot of interesting information in here that can get you thinking about problems in different ways. It's handy to have, just to pick up once in a while to learn something new.
	
share 	 answered Oct 14 '08 at 12:04 
	 community wiki 
 Tarski 	
		
		
 feedback   301122  up vote 9 down vote 	Systemantics: How Systems Work and Especially How They Fail. Get it used cheap. But you might not get the humor until you've worked on a few failed projects.
The beauty of the book is the copyright year.
Probably the most profound takeaway "law" presented in the book:
The Fundamental Failure-Mode Theorem (F.F.T.): Complex systems usually operate in failure mode.
The idea being that there are failing parts in any given piece of software that are masked by failures in other parts or by validations in other parts. See a real-world example at the Therac-25 radiation machine, whose software flaws were masked by hardware failsafes. When the hardware failsafes were removed, the software race condition that had gone undetected all those years resulted in the machine killing 3 people.
	
share 	 edited Nov 19 '08 at 6:04 
	 community wiki 
 2 revs
Nicholas Piasecki 	
		
	
1 	   	
Also check out The Systems Bible by the same author (John Gall). It's the third edition of Systemantics, he just changed the title. This is the book you'd steal from school. It's the book that grown adults read under a blanket with a flashlight. – C. Lawrence Wenham Nov 27 '10 at 17:16	
 feedback   962377  up vote 9 down vote 	One of my personal favorites is Hacker's Delight, because it was as much fun to read as it was educational.
I hope the second edition will be released soon!
	
share 	 answered Jun 7 '09 at 17:38 
	 community wiki 
 tr9sh 	
		
		
show 1 more comment  feedback   1055376  up vote 9 down vote 	Concepts, Techniques, and Models of Computer Programming.
  alt text  
	
share 	 answered Jun 28 '09 at 17:55 
	 community wiki 
 amit 	
		
		
show 1 more comment  feedback   1442468  up vote 9 down vote 	Extreme Programming Explained: Embrace Change by Kent Beck. While I don't advocate a hardcore XP-or-the-highway take on software development, I wish I had been introduced to the principles in this book much earlier in my career. Unit testing, refactoring, simplicity, continuous integration, cost/time/quality/scope - these changed the way I looked at development. Before Agile, it was all about the debugger and fear of change requests. After Agile, those demons did not loom as large.
	
share 	 answered Sep 18 '09 at 3:34 
	 community wiki 
 TrueWill 	
		
		
 feedback   2912701  up vote 9 down vote 	Types and Programming Languages by Benjamin C Pierce for a thorough understanding of the underpinnings of programming languages.
	
share 	 answered May 26 '10 at 12:01 
	 community wiki 
 Dave Clarke 	
		
		
 feedback   3416315  up vote 9 down vote 	  alt text  
	
share 	 answered Aug 5 '10 at 15:26 
	 community wiki 
 shawndumas 	
		
		
 feedback   4218702  up vote 9 down vote 	Database System Concepts is one of the best books you can read on understanding good database design principles.
  alt text  
	
share 	 answered Nov 18 '10 at 19:27 
	 community wiki 
 Ryan Berger 	
		
		
 feedback   1444527  up vote 9 down vote 	The practice of programming. By Brian W. Kernighan, Rob Pike.
The style shown here is excellent - the code just speaks for itself, and the whole book follows the KISS principle. Personally not my languages of choice, but still influential to me.
	
share 	 edited Jan 22 '11 at 19:52 
	 community wiki 
 2 revs, 2 users 82%
RD1 	
		
	
1 	   	
-1 Duplicate of stackoverflow.com/questions/1711/… – Ruben Bartelink Mar 27 '10 at 13:41	
 feedback   4252445  up vote 9 down vote 	Programming from the ground up. It's free on the internet. This book taught me AT&T asm. It is very easy to read.
  alt text  
	
share 	 edited May 17 '11 at 4:19 
	 community wiki 
 ladookie 	
		
		
 feedback   72432  up vote 9 down vote 	Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp by Peter Norvig
  enter image description here  
I started reading it because I wanted to learn Common Lisp. When I was halfway, I realized this was the greatest book about programming I had read so far.
	
share 	 edited Dec 7 '11 at 9:09 
	 community wiki 
 2 revs
Michiel Borkent 	
		
		
 feedback   371191  up vote 9 down vote 	Definitively Software Craftsmanship 
  alt text  
This book explains a lot of things about software engineering, system development. It's also extremly useful to understand the difference between different kind of product developement: web VS shrinkwrap VS IBM framework. What people had in mind when they conceived waterfall model? Read this and all we'll become clear (hopefully)
	
share 	 edited Jan 30 '12 at 17:56 
	 community wiki 
 3 revs, 3 users 62%
dario minonne 	
		
		
show 4 more comments  feedback   1788  up vote 8 down vote 	@Peter Coulton -- you don't read Knuth, you study it.
For me, and my work... Purely Functional Data Structures is great for thinking and developing with functional languages in mind.
	
share 	 answered Aug 5 '08 at 1:25 
	 community wiki 
 nlucaroni 	
		
		
 feedback   69157  up vote 8 down vote 	"The World is Flat" by Thomas Friedman. 
Excellence in programming demands an investment of mental energy and a dedication to continued learning comparable to the professions of medicine or law. It pays a fraction of what those professions pay, much less the wages paid to the mathematically savvy who head into the finance sector. And wages for constructing code are eroding because it's a profession that is relatively easy for the intelligent and self-disciplined in most economies to enter.
Programming has already eroded to the point of paying less than, say, plumbing. Plumbing can't be "offshored." You don't need to pay $2395 to attend the Professional Plumber's Conference every other year for the privilege of receiving an entirely new set of plumbing technologies that will take you a year to learn. 
If you live in North America or Europe, are young, and are smart, programming is not a rational career choice. Businesses that involve programming, absolutely. Study business, know enough about programming to refine your BS detector: brilliant. But dedicating the lion's share of your mental energy to the mastery of libraries, data structures, and algorithms? That only makes sense if programming is something more to you than an economic choice.
If you love programming and for that reason intend to make it your career, then it behooves you to develop a cold-eyed understanding of the forces that are, and will continue, to make it a harder and harder profession in which to make a living. "The World is Flat" won't teach you what to name your variables, but it will immerse you for 6 or 8 hours in economic realities that have already arrived. If you can read it, and not get scared, then go out and buy "Code Complete."
	
share 	 answered Sep 16 '08 at 3:25 
	 community wiki 
 Larry OBrien 	
		
		
show 1 more comment  feedback   1169110  up vote 8 down vote 	  alt text  
This last year I took a number of classes. I read

The Innovator's Dilemma (disruptive tech)
The Mythical Man Month (managing software)
Crossing the Chasm (startup)
Database Management Systems, The COW Book
Programming C#, The OSTRICH Book
Beginning iPhone Developmen, The GRAPEFRUIT Book

Each book was amazing but the Innovator's Dilemma by Clayton Christensen (1997!!!) is really a fantastic book, and it got me really thinking about the modern software world. The challenge addressed is disruptive technology, and how disk drive companies and non-technical companies are always disrupted by new, game changing technology. It gives one a new perspective when thinking about Google, probably the biggest 'web' company. Why do they have their hands in EVERYTHING? It's because they don't want to have their position disrupted by something new. The preview on google is plenty to get the idea. Read it!
	
share 	 answered Jul 23 '09 at 1:24 
	 community wiki 
 TahoeWolverine 	
		
		
show 1 more comment  feedback   1805444  up vote 8 down vote 	hackers, by Steven Levy.
The personality and way of life must come first. Everything else can be learned.
	
share 	 answered Nov 26 '09 at 20:04 
	 community wiki 
 tsilb 	
		
		
 feedback   3346201  up vote 8 down vote 	The Practice of Programming
  alt text  
and
How to solve it by computer
  alt text  
	
share 	 answered Jul 27 '10 at 17:27 
	 community wiki 
 agupta666 	
		
		
 feedback   4008769  up vote 8 down vote 	The Python language was very influential to me, I wish I would have read these book years ago. The beauty and simplicity of the Python language really affected how I wrote code in other languages.
  alt text    alt text  
	
share 	 answered Oct 24 '10 at 15:01 
	 community wiki 
 Matthew J Morrison 	
		
	
2 	   	
I think starting new programmers with Python would reduce the amount of ugly code in the world. I work with someone who randomly indents lines - that person wouldn't do that if they had worked with Python for a few months. – xnine Oct 25 '10 at 5:56	
	
6 	   	
I think starting new programmers with Python would reduce the amount of other languages. – Marco Mariani Oct 25 '10 at 8:51	
	
2 	   	
Are those covers a coincidence? – Kelly S. French Dec 16 '10 at 21:00	
 feedback   1967401  up vote 8 down vote 	  The New Turing Omnibus  
Really good book. Has a high-level taste of the most important areas of computer science. Yes, CS != programming, but this is still useful to every programmer.
	
share 	 edited Jun 20 '11 at 21:23 
	 community wiki 
 Derrick 	
		
		
 feedback   2362817  up vote 8 down vote 	Object Oriented Analysis and Design with Applications by Brady Booch
	
share 	 edited Oct 18 '11 at 15:36 
	 community wiki 
 2 revs, 2 users 67%
Matthieu 	
		
		
 feedback   21002  up vote 7 down vote 	The Mythical Man-Month by Fred Brooks http://en.wikipedia.org/wiki/The_Mythical_Man-Month
	
share 	 answered Aug 21 '08 at 20:02 
	 community wiki 
 Loren Charnley 	
		
		
 feedback   29338  up vote 7 down vote 	I think that "The Art of Unix Programming" is an excellent book, by an excellent hacker/brilliant mind as Eric S. Raymond, who tries to make us understand a few principles of software design (simplicity mainly). This book is a must for every programming who is about to start a project under Unix platform.
	
share 	 answered Aug 27 '08 at 1:42 
	 community wiki 
 lurks 	
		
	
6 	   	
this is a duplicate. – Christopher Mahan Nov 8 '09 at 9:54	
 feedback   33671  up vote 7 down vote 	While I agree that many of the books above are must-reads (Pragmatic Programmer, Mythical Man-Month, Art of Computer Programming, and SICP come to mind immediately), I'd like to go in a slightly different direction and recommend A Discipline of Programming by Edsger Dijkstra. Even though it's 32 years old, the emphasis on "design for verifiability" is highly relevant (even if "verifiability" means "proof" instead "unit tests").
	
share 	 answered Aug 28 '08 at 23:47 
	 community wiki 
 joel.neely 	
		
		
 feedback   60634  up vote 7 down vote 	Code Craft by Pete Goodliffe is a good read!
  Code Craft  
	
share 	 answered Sep 13 '08 at 15:53 
	 community wiki 
 mattruma 	
		
		
show 1 more comment  feedback   80944  up vote 7 down vote 	Martin Fowler's Refactoring: Improving the Design of Existing Code has already been listed. But I will detail why it has impacted me.
The essence of the whole book is about structuring code so that it is simpler to read and understand by humans. It teaches me strongly that the code that I write is meant for my colleagues and successors to consume and possibly learn something good out of it. It inspires me to consciously program in a manner that leaves people praising my name, and not cursing me to damnation for all eternity.
	
share 	 answered Sep 17 '08 at 7:55 
	 community wiki 
 icelava 	
		
		
 feedback   119305  up vote 7 down vote 	  alt text  
C++ How to Program It is good for beginner.This is excellent book that full complete with 1500 pages.
	
share 	 answered Sep 23 '08 at 5:48 
	 community wiki 
 Krirk 	
		
		
show 1 more comment  feedback   664822  up vote 7 down vote 	Here's an excellent book that is not as widely applauded, but is full of deep insight: Agile Software Development: The Cooperative Game, by Alistair Cockburn. 
What's so special about it? Well, clearly everyone has heard the term "Agile", and it seems most are believers these days. Whether you believe or not, though, there are some deep principles behind why the Agile movement exists. This book uncovers and articulates these principles in a precise, scientific way. Some of the principles are (btw, these are my words, not Alistair's):
  •  The hardest thing about team software development is getting everyone's brains to have the same understanding. We are building huge, elaborate, complex systems which are invisible in the tangible world. The better you are at getting more peoples' brains to share deeper understanding, the more effective your team will be at software development. This is the underlying reason that pair programming makes sense. Most people dismiss it (and I did too initially), but with this principle in mind I highly recommend that you give it another shot. You wind up with TWO people who deeply understand the subsystem you just built ... there aren't many other ways to get such a deep information transfer so quickly. It is like a Vulcan mind meld.
  •  You don't always need words to communicate deep understanding quickly. And a corollary: too many words, and you exceed the listener/reader's capacity, meaning the understanding transfer you're attempting does not happen. Consider that children learn how to speak language by being "immersed" and "absorbing". Not just language either ... he gives the example of some kids playing with trains on the floor. Along comes another kid who has never even SEEN a train before ... but by watching the other kids, he picks up the gist of the game and plays right along. This happens all the time between humans. This along with the corollary about too many words helps you see how misguided it was in the old "waterfall" days to try to write 700 page detailed requirements specifications.
There is so much more in there too. I'll shut up now, but I HIGHLY recommend this book!
	
share 	 answered Mar 20 '09 at 2:45 
	 community wiki 
 Charlie Flowers 	
		
	
2 	   	
A unique contribution, and you took the time to clearly explain why it was worth reading. +1 for originality and effort! I shall look forward to reading this soon... – Avery Payne May 20 '09 at 6:58	
show 1 more comment  feedback   238388  up vote 7 down vote 	Masters of doom. As far as motivation and love for your profession go: it won't get any better than what's been described in this book, truthfully inspiring story!
	
share 	 edited Jul 4 '09 at 9:10 
	 community wiki 
 2 revs
Jasper Bekkers 	
		
		
show 1 more comment  feedback 1 2 3 4 5 … 8  next  Not the answer you're looking for? Browse other questions tagged books resources reading or ask your own question. 
Hello World!
This is a collaboratively edited question and answer site for professional and enthusiast programmers. It's 100% free, no registration required.
about »   faq » 
tagged
resources × 4248
books × 2680
reading × 418
asked
	4 years ago
	
viewed
	421244 times 
	
active
	10 months ago
	
Linked
List of freely available programming books What non-programming books should programmers read? Is Agile Development Dead? What constitutes beautiful code? If you wanted to improve software development in your organization and you had $1000 to spend, what would you spend it on? Pair programming means double cost per developer. Is it worth that money? How to become a better C++ programmer? Where can I find good technical video podcasts or videos for download? Is Scrum Evil? Your Favorite Programming Book available for FREE download Ruby (and Ruby On Rails) book recommendations How do I learn programming without books? What type of errors could my code still contain even if I have 100% code coverage? Coding magazines What does it take to be a better OO programmer? Design principles for complete noobs? What are some good tips for a new PHP developer? Is there a compiler or IDE for C on Windows that's regarded as an industry standard? Software development process for small teams Books for bringing up a new programmer How can someone with no experience learn how to program? see more linked questions… Related
What are some good resources for learning C beyond K&R Would you recommend the book “Programming in Scala” for an experienced developer? What resources do you recommend, in order to learn use case driven development? Should you always read a book when picking up a new technology? What advice would you give to authors of programming books, blogs, web casts etc? Which books should a programmer read and in which order? What is the best source for a clear explanation of how to use the Python help? How to read a technical book to remember most of it? What book or books should every programmer own? What should I be reading for intermediate Cocoa programming instruction? Are there any programming textbooks directly based on David Parnas' concepts? Enforced reading list for development & test team What are the books about Open-Source that everyone interested in should read? Programming books from cover to cover in one-shot? Do you prefer to read/reference your technical books in print or digital form? Are programming books still relevant? What one programming book have you actually read twice? Software development books are useful, but when to find the time to read them? What is the best book similar to “Pro C# 2008” for C++? Which is the best book to learn computer networking? Amateur Programmer seeking easy-to-read books on algorithms Display book pages in android Java Books Reading Order Book for effective javascript(apart from definitve guide and good parts) What are the most influential books on parallel programming any programmer should read about | faq | blog | chat | data | legal | privacy policy | jobs | advertising info | mobile | contact us | feedback ■ stackoverflow.com  ■ api/apps  ■ careers 2.0  ■ serverfault.com  ■ superuser.com  ■ meta  ■ area 51  ■ webapps  ■ gaming  ■ ubuntu  ■ webmasters  ■ cooking  ■ game development  ■ math  ■ photography  ■ stats  ■ tex  ■ english  ■ theoretical cs  ■ programmers  ■ unix  ■ apple  ■ wordpress  ■ physics  ■ home improvement  ■ gis  ■ electrical engineering  ■ android  ■ security  ■ bicycles  ■ dba  ■ drupal  ■ sharepoint  ■ scifi & fantasy  ■ user experience  ■ skeptics  ■ rpg  ■ judaism  ■ mathematica  rev 2013.1.14.914  site design / logo © 2013 stack exchange inc; user contributions licensed under cc-wiki with attribution required Stack Overflow works best with JavaScript enabled    