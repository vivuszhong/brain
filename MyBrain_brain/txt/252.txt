                    TDD并不是看上去的那么美 | 酷壳 - CoolShell.cn
  web analytics   <a title="把这个链接拖到你的Chrome收藏夹工具栏中" href='javascript:(function(){function c(){var e=document.createElement("link");e.setAttribute("type","text/css");e.setAttribute("rel","stylesheet");e.setAttribute("href",f);e.setAttribute("class",l);document.body.appendChild(e)}function h(){var e=document.getElementsByClassName(l);for(var t=0;te&&s.heightt&&s.width=w&&t<<=b+w}function S(){var e=document.createElement("audio");e.setAttribute("class",l);e.src=i;e.loop=false;e.addEventListener("canplay",function(){setTimeout(function(){x(k)},500);setTimeout(function(){N();p();for(var e=0;eIf you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.";document.body.appendChild(e);e.play()}function x(e){e.className+=" "+s+" "+o}function T(e){e.className+=" "+s+" "+u[Math.floor(Math.random()*u.length)]}function N(){var e=document.getElementsByClassName(s);var t=new RegExp("\\b"+s+"\\b");for(var n=0;n<e.length;){e[n].className=e[n].className.replace(t,"")}}var e=30;var t=30;var n=350;var r=350;var i="//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3";var s="mw-harlem_shake_me";var o="im_first";var u=["im_drunk","im_baked","im_trippin","im_blown"];var a="mw-strobe_light";var f="//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css";var l="mw_added_css";var b=g();var w=y();var C=document.getElementsByTagName("*");var k=null;for(var L=0;L<C.length;L++){var A=C[L];if(v(A)){if(E(A)){k=A;break}}}if(A===null){console.warn("Could not find a node of the right size. Please try a different page.");return}c();S();var O=[];for(var L=0;LHigh一下! 
酷壳 – CoolShell.cn
享受编程和技术所带来的快乐 – http://coolshell.cn   •  首页
  •  推荐文章
  •  本站插件
  •  留言小本
  •  关于酷壳
  •  关于陈皓
  •  
首页 > 流程方法 > TDD并不是看上去的那么美 TDD并不是看上去的那么美
2011年2月12日 陈皓 发表评论 阅读评论  19,840 人阅读     春节前的一篇那些炒作过度的技术和概念中对敏捷和中国ThoughtWorks的微辞引发了很多争议，也惊动了中国ThoughtWorks公司给我发来了邮件想来找我当面聊聊。对于Agile的Fans们，意料之中地也对我进行了很多质疑和批评。我也回复了许多评论。不过，我的那些回复都是关于中国ThoughtWorks咨询师以及其咨询的方法的。我对Agile方法论中的具体内容评价的不是很多，所以，我想不妨讨论一下Agile方法论中的具体的实践（以前本站也讨论过结对编程的利与弊）。
那么，这次就说说TDD吧，这是ThoughtWorks中国和Agile的Fans们最喜欢的东西了。我在原来的那篇文章中，我把TDD从过度炒作的技术剔除了出去，因为我还是觉得TDD有些道理的，不过，回顾我的经验，我也并不是很喜欢TDD。我这篇文章是想告诉大家，TDD并没有看上去的那么美，而且非常难以掌控，并且，这个方法是有悖论之处的。
TDD简介
TDD全称Test Driven Development，是一种软件开发的流程，其由敏捷的“极限编程”引入。其开发过程是从功能需求的test case开始，先添加一个test case，然后运行所有的test case看看有没有问题，再实现test case所要测试的功能，然后再运行test case，查看是否有case失败，然后重构代码，再重复以上步骤。其理念主要是确保两件事：
  •  确保所有的需求都能被照顾到。
  •  在代码不断增加和重构的过程中，可以检查所有的功能是否正确。
我不否认TDD的一些有用的地方，如果我们以Test Case 开始，那么，我们就可以立刻知道我们的代码运行的情况是什么样的，这样可以让我们更早地得到我们实现思路的反馈，于是我们更会有信心去重构，去重新设计，从而可以让我们的代码更为正确。
不过，我想提醒的是，TDD和Unit Test是两码子事儿。有很多人可能混淆了自动化的Unit Test（如：XUnit系例）和TDD的软件开发过程。另外，可能还会有人向鼓吹“TDD让你进行自顶向下的设计方式”，对此，请参阅本站的《Richard Feynman, 挑战者号, 软件工程》——NASA的挑战者号告诉你自顶向下设计的危险性。
TDD的困难之处
下面是几个我认为TDD不容易掌控的地方，甚至就有些不可能（如果有某某TDD的Fans或是ThoughtWorks的咨询师和你鼓吹TDD，你可以问问他们下面这些问题）
  •  测试范围的确定。TDD开发流程，一般是先写Test Case。Test Case有很多种，有Functional的，有Unit的，有Integration的……，最难的是Test Case要写成什么样的程度呢。


  •  如果写的太过High Level，那么，当你的Test Case 失败的时候，你不知道哪里出问题了，你得要花很多精力去debug代码。而我们希望的是其能够告诉我是哪个模块出的问题。只有High Level的Test Case，岂不就是Waterfall中的Test环节?
  •  如果写的太过Low Level，那么，带来的问题是，你需要花两倍的时间来维护你的代码，一份给test case，一份给实现的功能代码。
  •  另外，如果写得太Low Level，根据Agile的迭代开发来说，你的需求是易变的，很多时候，我们的需求都是开发人员自己做的Assumption。所以，你把Test Case 写得越细，将来，一旦需求或Assumption发生变化，你的维护成本也是成级数增加的。
  •  当然，如果我把一个功能或模块实现好了，我当然知道Test 的Scope在哪里，我也知道我的Test Case需要写成什么样的程度。但是，TDD的悖论就在于，你在实现之前先把Test Case就写出来，所以，你怎么能保证你一开始的Test Case是适合于你后面的代码的？不要忘了，程序员也是在开发的过程中逐渐了解需求和系统的。如果边实现边调整Test Case，为什么不在实现完后再写Test Case呢？如果是这样的话，那就不是TDD了。
  •  关注测试而不是设计。这可能是TDD的一个弊端，就像《十条不错的编程观点》中所说的一样——“Unit Test won’t help you write the good code”，在实际的操作过程中，我看到很多程序员为了赶工或是应付工作，导致其写的代码是为了满足测试的，而忽略了代码质量和实际需求。有时候，当我们重构代码或是fix bug的时候，甚至导致程序员认为只要所有的Test Case都通过了，代码就是正确的。当然，TDD的粉丝们一定会有下面的辩解： 

  •  可以通过结对编程来保证代码质量。
  •  代码一开始就是需要满足功能正确，后面才是重构和调优，而TDD正好让你的重构和优化不会以牺牲功能为代价。
说的没错，但仅在理论上。操作起来可能会并不会得到期望的结果。1）“结对编程”其并不能保证结对的两个人都不会以满足测试为目的，因为重构或是优化的过程中，一旦程序员看到N多的test cases 都failed了，人是会紧张的，你会不自然地去fix你的代码以让所有的test case都通过。2）另外，我不知道大家怎么编程，我一般的做法是从大局思考一下各种可行的实现方案，对于一些难点需要实际地去编程试试，最后权衡比较，挑选一个最好的方案去实现。而往往着急着去实现某一功能，通常在会导致的是返工，而后面的重构基本上因为前期考虑不足和成为了重写。所以，在实际操作过程中，你会发现，很多时候的重构通常意味着重写，因为那些”非功能性”的需求，你不得不re-design。而re-design往往意味着，你要重写很多Low-Level的Test Cases，搞得你只敢写High Level的Test Case。

  •  TDD导致大量的Mock和Stub。相信我，Test Case并不一定是那么容易的。比如，和其它团队或是系统的接口的对接，或是对实现还不是很清楚的模块，等等。于是你需要在你的代码中做很多的Mock和Stub，甚至fake一些函数来做模拟，很明显，你需要作大量的 assumption。于是，你发现管理和维护这些Mock和Stub也成了一种负担，最要命的是，那不是真正的集成测试，你的Test Case中的Mock很可能是错的，你需要重写他们。
也许，你会说，就算是不用TDD，在正常的开发过程中，我们的确需要使用Mock和Stub。没错！的确是这样的，不过，记住，我们是在实现代码后来决定什么地方放一个Mock或Stub，而不是在代码实现前干这个事的。
  •  Test Case并没有想像中的那么简单。和Waterfall一样，Waterfall的每一个环节都依赖于前面那个环节的正确性，如果我们没有正确的理解需求，那么对于TDD，Test Case和我们的Code都会的错的。所以，TDD中，Test Case是开发中最重要的环节，Test Case的质量的问题会直接导致软件开发的正确和效率。而TW的咨询师和Agile的Fans们似乎天生就认为，TDD比Waterfall更能准确地了解需求。如果真是这样，用TDD进行需求分析，后面直接Waterfall就OK了。
另外，某些Test Case并不一定那么好写，你可能80%的编程时间需要花在某个Test Case的设计和实现上（比如：测试并发），然后，需求一变，你又得重写Test Case。有时候，你会发现写Test Case其实和做实际设计没有差别，你同样要考虑你Test Case的正确性，扩展性，易读性，易维护性，甚至重用性。如果说我们开发的Test Case是用来保证我们代码实现的正确性，那么，谁又来保证我们的Test Case的正确性呢？编写Test Case也需要结对或是Code review吗？软件开发有点像长跑，如果把能量花在了前半程，后半程在发力就能难了。
也许，TDD真是过度炒作的，不过，我还真是见过使用TDD开发的不错的项目，只不过那个项目比较简单了。更多的情况下，我看到的是教条式的生硬的TDD，所以，不奇怪地听到了程序员们的抱怨——“自从用了TDD，工作量更大了”。当然，这也不能怪他们，TDD本来就是很难把控的方法。这里送给软件开发管理者们一句话——“当你的软件开发出现问题的时候，就像bug-fix一样，首要的事是找到root cause，然后再case by case的解决，千万不要因为有问题就要马上换一种新的开发方法”。相信我，大多数的问题是人和管理者的问题，不是方法的问题。
（全文完，转载请注明作者和出处，请勿用于商业用途） 
（转载本站文章请注明作者和出处 酷壳 – CoolShell.cn ，请勿用于任何商业用途） ——=== 访问 酷壳404页面 寻找遗失儿童。 ===—— 分类: 流程方法 标签: agile, TDD   好烂啊    有点差    凑合看看    还不错    很精彩 (25 人打了分，平均分： 4.48 )
  Loading ...  Loading ... 
相关文章
  •  2012年09月03日 -- “单元测试要做多细？”
  •  2011年06月27日 -- Bob大叔和Jim Coplien对TDD的论战
  •  2011年10月17日 -- Test-Driven Development？别逗了
  •  2011年02月24日 -- [转]TDD到底美还是不美？
  •  2011年02月25日 -- 敏捷水管工
  •  2011年08月12日 -- 在新浪微博上关于敏捷的一些讨论
  •  2011年02月24日 -- 再谈敏捷和ThoughtWorks中国咨询师
  •  2012年06月25日 -- 持续部署，并不简单！
Zemanta 评论 (67) Trackbacks (21) 发表评论 Trackback   •     snow  2011年7月21日10:21 | #1 回复 | 引用 

     
bob  :>>相信我，大多数的问题是人和管理者的问题，不是方法的问题。这句话是经典,,,

呵呵，我觉得，方法的产生就是为了协调人和管理者在项目中的分工和角色，如果方法不能做到，那他可能是不合适，但如果全部推到人的因素上，那未免有些偏颇，如果人都是完美的，那任何方法都能做好了，也就无所谓何种方法了。
  •     Alias  2011年8月15日12:44 | #2 回复 | 引用 
如果说我们开发的Test Case是用来保证我们代码实现的正确性，那么，谁又来保证我们的Test Case的正确性呢？
深有同感。对于做测试开发的人来说，这是个非常具有讽刺意味的一句话。我们保证另外一个人写的功能运行正确，却无法保证我们自己写的代码一定没问题。这就像是一条蛇咬住了自己的尾巴。
  •     呼呼默默  2011年12月24日00:00 | #3 回复 | 引用 
目前，TDD确实是一个比较时髦的名称，当我们这些码农还没想好怎么去做的时候，公司的测试组已经开始针对需求进行Test Case的开发，曰介凑是TDD啊。开发项目组内也曾讨论过如果更有效的利用在开发过程中写的针对于各个接口的Unit Test，试着组织起一套完整的自动化测试过程出来。但是我们项目的性质，更多需要测试的实际上是Functional，Integration, System Test，简单的Unit Test仅仅能保证的是个人代码能正常运行而已。并且随着项目的进展，可能会是其他人来对这个功能进行重构，从接口上进行变化是一件很常见的事情，往往到最后，这些实现的Unit Test只能束之高阁，也许哪天需要底层调试的时候再重新改一改运行一下而已。所以对于我个人而言，我宁可相信从测试组传道过来的TDD理念，而不是由Developer完全Driver的TDD，前者往往能帮助你发现你系统中的更多问题。
  •     jnj  2011年12月24日11:50 | #4 回复 | 引用 
TDD中的T可以是任何类型的测试,Unit Test, Integration Test, 或者 Functional Test都可以。
  •     jackhuang  2012年3月16日22:07 | #5 回复 | 引用 
评论不知道怎么没了？再发，希望不是发重了。
楼主的观点我不大赞同。
TDD我理解应该是分层次的，需求、设计、编码的人都可以以TDD的方式工作和协作，各个层次的人通过不同层次的测试用例表达了自己想要的是什么。因此，TDD不是一个人写了一堆测试代码然后以此驱动所有人干活。
最早写出来的测试代码应该直接针对业务功能的，需求人员即使不能写也可以读一下这些测试代码，确认一下这些测试代码是不是代表了他们想要的业务功能特性。这些测试代码对应的是需求。
为了实现这些功能，做设计的人会设计一些模块或者方法，这些模块和方法可能是他自己写也可能要求别人写，于是他又写了一些测试代码，用来表明他要求实现的方法是什么样的。这些测试代码对应的是概要设计。
被要求实现这些方法的人，为此可能要再做一些更细致的设计（编码本来就是设计），如果继续用TDD的方法，那么他们也会写一些测试用例来检验自己的代码。这些测试代码对应的是一些私有方法和实现代码了，可以认为是单元测试或者白盒测试代码。
另外说到方法和流程的问题，无疑项目是依靠人的，如果有足够的几个相互熟悉的牛人来，也许什么方法都不需要的。但现实情况下，每个项目你都得不到足够的牛人，你面对的就是一群资质很一般、经验很一般的普通人。即使你在google这类地方，我相信也是有少数人（通常这些少数人就是项目领头人什么的）认为其他大部分人相对他们面临的任务是笨蛋。搞出这些“方法”来，无非就是让一群普通人不至于弄出什么不好收拾的纰漏来，平安地把项目做完。
东方文明与西方文明的差距越来越大，我认为根本原因之一是在于东方文明太不注意理论和方法的积累，感性、人治的成分为主。依靠明君而不是依靠制度总不是很靠谱的事情。
  •     尘埃  2012年8月3日14:30 | #6 回复 | 引用 
我很虔诚的对待TDD，确实收获很多， 尤其自动化测试， 是人工测试无法比拟的。
 还有小步快跑的思想， 测试保证了改动的正确。
我顶TDD
  •     virusswb  2012年8月31日10:50 | #7 回复 | 引用 
@poet 
 这个我赞同，TDD和AUTO UNIT是两回事。也是两件事。
  •     dy  2012年12月6日23:24 | #8 回复 | 引用 
一直在思考TDD case粒度的问题，写好的确不容易
  •     黄英杰  2013年1月20日13:01 | #9 回复 | 引用 
TDD的核心是将大问题分解为正交的小问题，设计出正交的系统，它的能力范围仅限于这里，不要以银弹的视角攻击它。
 维护测试代码需要成本，但没有这些代码成本更大，TDD赌的就是这一条，如果人人都是天才，TDD就不需要了。
  •     agileluo  2013年2月1日10:20 | #10 回复 | 引用 
我是TDD的忠实fans， 我不认同你在文中提到的“关注测试而不是设计”， TDD，在一定层度上使用意向编程，写出来的代码是可测的，易读的的及且易维护的，至于”TDD导致大量的Mock和Stub”，我想说的是，现在有很多Mock框架，大大减少了这类代码（如java的mocikto），TDD的好处不用说， 一个可以提高生产率的技术， 是值得大家去克服困难的！
  •     zenc  2013年2月22日15:43 | #11 回复 | 引用 
我还不会TDD，嘿嘿，会都不会、用都不用，所以，我没有资格去评价TDD，一定要先学会，并能说出一二三，再回来，嘻嘻
  •     xiai.fei  2013年6月8日10:15 | #12 回复 | 引用 
@黄英杰 
 。所以你就需要在两者之间平衡。你是需要进行粒度更大的测试来保证系统的稳定性的时候，项目进度，testcase实现的工作量，维护的工作量是会加倍的增加。同时如果你的testcast出现错误的时候，你也会觉得很恐怖，因为你会得到一个你一直以为对，但确实错的成功。同时testcase无法发现你系统中的一个很小的问题。举个例子，在某个函数模块中你需要从配置库中读取配置，读取不到读取默认值。单单一个这样的功能，你就需要使用编写两个testcase来验证它。所以当测试粒度到达一定程序细的时候，你会发现你需要比你实现代码花3倍以上的时间来实现它，维护他就不算了。
 测试我是觉得一定需要的，不过究竟测试应该到达一个怎么样的粒度，应该在什么时候写testcase，个人认为每个项目都根据它自身的实际而有不同。不过取舍不是一件容易的事。
 以上只是本人的一些浅见，用于交流，都希望测试使得程序更好
  •     xiai.fei  2013年6月8日10:22 | #13 回复 | 引用 
楼主的另一篇文章：“单元测试要做多细？ ，中说得很好。
评论分页 « 上一页 1 2 3649   •    2011年2月17日11:34 | #1  再谈具体问题抽象分析 « 小刀的草色天涯 
  •    2011年2月24日08:26 | #2  再谈敏捷和ThoughtWorks中国咨询师 | 酷壳 – CoolShell.cn 
  •    2011年2月24日15:41 | #3  [转]TDD到底美还是不美？ | 酷壳 – CoolShell.cn 
  •    2011年2月25日14:48 | #4  再谈敏捷和ThoughtWorks中国咨询师 | 网摘 
  •    2011年6月27日08:42 | #5  Bob大叔和Jim Coplien对TDD的论战 | 酷壳 – CoolShell.cn 
  •    2011年7月25日05:41 | #6  为什么Scrum不行？ — 见贤思齐 
  •    2011年7月25日13:00 | #7  Bob大叔和Jim Coplien对TDD的论战 | 零度领域的博客-我的一米阳光 
  •    2011年7月25日16:03 | #8  为什么Scrum不行？ | 零度领域的博客-我的一米阳光 
  •    2011年8月15日08:58 | #9  GWeekly[2] = Home – 我住包子山 
  •    2011年9月15日04:33 | #10  TDD beauty is not beautiful, how beautiful TDD, why exactly TDD with up to no so beautiful? 
  •    2011年10月17日08:44 | #11  Test-Driven Development？别逗了 | 酷壳 – CoolShell.cn 
  •    2012年9月3日08:13 | #12  “单元测试要做多细？” | 酷壳 – CoolShell.cn 
  •    2012年9月3日12:05 | #13  陈皓：单元测试要做多细？ – 博客 – 伯乐在线 
  •    2012年9月3日19:48 | #14  Definite Digest » “单元测试要做多细？” 
  •    2012年9月11日09:42 | #15  陈皓：单元测试要做多细？ – 好工作博客在线 
  •    2012年9月23日16:23 | #16  TDD到底美不美 | EvilCode 邪恶代码 
  •    2012年10月19日21:37 | #17  纸人笔记 – 单元测试要做多细？ 
  •    2012年12月18日20:53 | #18  “单元测试要做多细？” | Suuch 
  •    2013年6月15日00:24 | #19  TDD并不是看上去的那么美 | 各路 
  •    2013年7月30日09:20 | #20  TDD视频-闰年计算 – 程序员 – 开发者第2223594个问答 
  •    2013年11月10日16:17 | #21  “单元测试要做多细？” | multiprocess 
昵称 (必填) 电子邮箱 (我们会为您保密) (必填) 网址 订阅评论   提交评论    3649    d0392cd0e8  
为啥搞电脑的会有这么多空闲时间？ GDB中应该知道的几个调试方法 订阅   •   Google
  •  有道
  •  鲜果
  •  抓虾
  •   My Yahoo!
  •   newsgator
  •   Bloglines
  •  哪吒
  •   QQ Mail 
  •   Douban 
  •   Rojo 
  •   Pageflakes 
Twitter 本站公告
访问 酷壳404页面 寻找遗失儿童！
酷壳建议大家多使用RSS访问阅读（本站已经是全文输出，推荐使用cloud.feedly.com 或 digg.com）。有相关事宜欢迎电邮：haoel(at)hotmail.com。最后，感谢大家对酷壳的支持和体谅！
感谢 42qu.com 为本站提供 VPS 
最新文章
  •   程序的本质复杂性和元语言抽象 
  •   二维码的生成细节和原理 
  •   伙伴分配器的一个极简实现 
  •   C++11的Lambda使用一例：华容道求解 
  •   C++面试中string类的一种正确写法 
  •   C++模板”>>”编译问题与词法消歧设计 
  •   数据即代码：元驱动编程 
  •   数据的游戏：冰与火 
  •   7个示例科普CPU Cache 
  •   加班与效率 
  •   类型的本质和函数式实现 
  •   C语言全局变量那些事儿 
  •   二叉树迭代器算法 
  •   Alan Cox：大教堂、市集与市议会 
  •   IoC/DIP其实是一种管理思想 
  •   Alan Cox：单向链表中prev指针的妙用 
  •   Javascript 装载和执行 
  •   无锁HashMap的原理与实现 
  •   浏览器的渲染原理简介 
  •   疫苗：Java HashMap的死循环 
  •   “C++的数组不支持多态”？ 
  •   Unix考古记：一个“遗失”的shell 
  •   PFIF网上寻人协议 
  •   “作环保的程序员，从不用百度开始” 
  •   《Rework》摘录及感想 
  •   实例分析Java Class的文件结构 
  •   并发框架Disruptor译文 
  •   sed 简明教程 
  •   AWK 简明教程 
  •   Linus：利用二级指针删除单向链表 
全站热门
  •  程序员技术练级攻略
  •  简明 Vim 练级攻略
  •  如何学好C语言
  •  6个变态的C语言Hello World程序
  •  做个环保主义的程序员
  •  应该知道的Linux技巧
  •  由12306.cn谈谈网站性能技术
  •  “21天教你学会C++”
  •  “作环保的程序员，从不用百度开始”
  •  我是怎么招聘程序员的
  •  Android将允许纯C/C++开发应用
  •  28个Unix/Linux的命令行神器
  •  C++ 程序员自信心曲线图
  •  编程真难啊
  •  Web开发中需要了解的东西
  •  20本最好的Linux免费书籍
  •  SteveY对Amazon和Google平台的吐槽
  •  如何学好C++语言
  •  程序算法与人生选择
  •  如何写出无法维护的代码
  •  Windows编程革命简史
  •  各种流行的编程风格
  •  深入理解C语言
  •  面试题：火车运煤问题
  •  别的程序员是怎么读你的简历的
  •  三个事和三个问题
  •  老手是这样教新手编程的
  •  C语言的谜题
  •  再谈“我是怎么招聘程序员的”（上）
  •  性能调优攻略
新浪微博
标签
agile AJAX Algorithm Android Bash C++ Coding CSS Database Design design pattern ebook Flash Game Go Google HTML IE Java Javascript jQuery Linux MySQL OOP password Performance PHP Programmer programming language Puzzle Python Ruby SQL TDD UI Unix vim Web Windows XML 口令 安全 程序员 算法 面试 分类目录
  •  .NET编程 (2) 
  •  Ajax开发 (9) 
  •  C/C++语言 (58) 
  •  Erlang (1) 
  •  Java语言 (29) 
  •  PHP脚本 (11) 
  •  Python (21) 
  •  Ruby (5) 
  •  Unix/Linux (66) 
  •  Web开发 (99) 
  •  Windows (12) 
  •  业界新闻 (25) 
  •  企业应用 (2) 
  •  技术新闻 (32) 
  •  技术管理 (10) 
  •  技术读物 (115) 
  •  操作系统 (43) 
  •  数据库 (10) 
  •  杂项资源 (252) 
  •  流程方法 (43) 
  •  程序设计 (72) 
  •  系统架构 (7) 
  •  编程工具 (61) 
  •  编程语言 (161) 
  •  网络安全 (22) 
  •  职场生涯 (32) 
  •  趣味问题 (14) 
  •  轶事趣闻 (145) 
归档
  •  2013年十月 (6)
  •  2013年八月 (1)
  •  2013年七月 (8)
  •  2013年六月 (2)
  •  2013年五月 (3)
  •  2013年四月 (3)
  •  2013年三月 (3)
  •  2013年二月 (5)
  •  2013年一月 (1)
  •  2012年十二月 (4)
  •  2012年十一月 (5)
  •  2012年十月 (3)
  •  2012年九月 (4)
  •  2012年八月 (8)
  •  2012年七月 (4)
  •  2012年六月 (7)
  •  2012年五月 (6)
  •  2012年四月 (6)
  •  2012年三月 (6)
  •  2012年二月 (3)
  •  2012年一月 (6)
  •  2011年十二月 (5)
  •  2011年十一月 (9)
  •  2011年十月 (6)
  •  2011年九月 (5)
  •  2011年八月 (14)
  •  2011年七月 (6)
  •  2011年六月 (12)
  •  2011年五月 (5)
  •  2011年四月 (18)
  •  2011年三月 (16)
  •  2011年二月 (16)
  •  2011年一月 (18)
  •  2010年十二月 (11)
  •  2010年十一月 (11)
  •  2010年十月 (19)
  •  2010年九月 (15)
  •  2010年八月 (10)
  •  2010年七月 (20)
  •  2010年六月 (9)
  •  2010年五月 (13)
  •  2010年四月 (12)
  •  2010年三月 (11)
  •  2010年二月 (7)
  •  2010年一月 (9)
  •  2009年十二月 (22)
  •  2009年十一月 (27)
  •  2009年十月 (17)
  •  2009年九月 (15)
  •  2009年八月 (21)
  •  2009年七月 (18)
  •  2009年六月 (19)
  •  2009年五月 (27)
  •  2009年四月 (53)
  •  2009年三月 (43)
最新评论
  •  haike: 我还是相信这句格言：Fail to plan is plan to fail. BTW，司机打电话那个比喻很不合适。
  •  九百特: 介绍的非常详细，收藏了！
  •  九百特: 人生本来就是抽象的！
  •  九百特: 有意思，有骨气！
  •  sduzh: 经常逛酷壳真的可以学到好多东西
  •  狼毒: 你好，问你个问题，awk在非交互模式下输出数据时，会有缓存功 能，如何去掉这个缓存，就是说让awk处理后直接写回文件中，而 不是先缓存，等缓存满了在写回文件？
  •  zhanglistar: C ends的时候，应该是所有的内存merge成一块的状态吧？
  •  飞跃疯人院: 笑死我了，那个小子敢在我的项目中这么干，我掐死他。
  •  Heartwork: 印象中glibc是为每一个2^i大小的块单独分配一页内存，这 样的话就省去了不同大小的块在同一块内存分配所导致的split /merge操作了（复杂度降低到O1），所有的页面通过一个哈 希表来维护。
  •  lgf2002: 个人浅见，函数check_form_x() 的实现方式并不好，随着软件越来越复杂，肯定会出现重复代码，这 是一定的。此函数，并没有完全遵守知识的单点性原则，一个...
  •  kulong0105: 最近怎么没有文章更新了啊~
  •  arganzheng: 淘宝加班应该也很严重吧？
  •  Long: 试试protocol buffer？@胖子 
  •  ナイキ ペガサス 29: two) Not only does the client get a voucher, but nevertheless must fill out every one of the federal...
  •  ナイキ モデル: four. System For achievement. Currently, remedy strategies for MS deal with altering the system with the...
友情链接
  •  陈皓的博客
  •  并发编程
  •  四火的唠叨
  •  devtext 开发者社区
  •  Claymore's blog
  •  Dutor.net
  •  bones7456
  •  Keengle's Blog
  •  简明现代魔法
  •  罗素工作室
  •  代码回音
  •  HelloGcc Working Group
  •  吕毅的Blog
  •  Todd Wei的Blog
  •  C++爱好者博客
  •  HTML5研究小组
  •  12Free
  •  朱文昊Albert Zhu
  •  C瓜哥的博客
  •  开源吧
  •  靖难|魔都小码农
  •  ACMer
  •  陈鹏个人博客
  •  OneCoder
  •  狂Shell – Happy Hacking
  •  TekTea's Blog 
  •  夕水溪下 
功能
  •  注册
  •  登录
  •  文章RSS
  •  评论RSS
  •  WordPress.org
 回到顶部 WordPress  版权所有 © 2009-2013 酷壳 – CoolShell.cn  主题由 NeoEase 提供, 通过 XHTML 1.1 和 CSS 3 验证.      检测到你还在使用百度这个搜索引擎，
 做为一个程序员，这是一种自暴自弃！


做环保的程序员，从不用百度开始！ 
