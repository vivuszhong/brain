                    “测试是浪费时间，我的程序肯定没问题” | 外刊IT评论网
外刊IT评论
  •  首页
  •  关于我们
  •  关注我们
  •  给我来信
  •  关注我们
  •  邮件订阅
  •  分享这篇文章
  •  新浪微博
  •  QQ空间
  •  腾讯微博
  •  人人网
  •  更多分享方式
  •  105
  •  « 上一篇
  •  |
  •  下一篇 »
Search“测试是浪费时间，我的程序肯定没问题”
发表在 心得体会 | 8条评论  tdd  
尽管关于测试驱动开发(TDD)的书和文章有成百上千之多，仍然有很多人从未感受过测试的强大力量。
之所以不愿意去写测试程序不外乎有以下几个理由：
  •  太费时间。
  •  不值得。
  •  我很懒。
  •  我不知道如何做。
  •  我知道我的程序好用，我运行过一次，没出问题。
  •  我是超人，我从来不犯错误。
除非你的答案是6.(如果是这样，我很羡慕你)，否则，你应该继续读下去。
让我们从一个简单的例子开始。就说你要写一个Email地址校验程序。
你也许会使用正则表达式，或手工实现每个字符的对比，来完成这个任务。
现在你想验证一下你的代码是否有效。你会怎么做？你可以手工输入不同的值来验证它是否符合你的要求，结果你就测试了像下面的这些东西：
foo
foo@bar
foo@bar.baz
...如果你要改变/调整校验算法会发生什么？你需要把之前所有的过程全部重复一遍，把每个值都再输入一遍，看看校验的结果。如果让计算机自动的帮你校验这些是不是会更好些呢？
通过把测试过程自动化，你可以在任何时候对程序进行任何遍次的测试。这不仅仅在以后会节省你大量的时间，而且会增加你的自信心，因为每次当你感觉到程序可能出错时，只要运行一下你的测试程序，看看测试结果就行了。
现在设想一下你正在编写一个更加复杂的程序，比如XML解析器。
你不可能编写出解析器后不去测试它，问题是，你如何测试它？通常，你会创建一个XML样板文件，把它输入解析器里，手工检查解析的结果。当你看到解析器按照要求输出了你期望的结果后，你确信你完成了任务，解析器没问题。
问题就在于如果你发现了一个Bug。那你就需要去修改你的代码，再验证一次它是否好用。可是我们程序员都是一群懒人，我们会只测试我们遇到的这个Bug，几乎从来不会去测试解析器的其它部分。这会产生什么问题呢？你能确保没有把什么东西改坏？
当你写了单元测试程序后，这个工作流程会变的怎样？
首先，你已经对程序进行过测试，之前你必须对每个函数进行手工的测试，手工的检查输出结果。如果这种事情你只需要做一次，那也没什么了，但当有东西出错时，你不想一遍一遍的重复做这个事情，没有人喜欢来回重复的做相同的事情，特别是无聊的事情。
另一种情况，你为你的解析器里的每个功能都写了自动测试程序。在这个例子中，你已经测试过你的程序，对这个过程你并不陌生。你需要做的是把手工的检查改为assertions，它们会为你自动测试程序。
当Bug出现时，巨大的变化发生了。
如果没有自动化测试，你必须手工的检查所有的东西来确保你在修正一个Bug时不会引入其它的错误。当有数个Bug出现时，你会变得极不耐烦，你开始不再检查其它部分的代码，只关注你的这个Bug。但假如你为程序写好了自动化测试，你唯一要做的就是点击一次按钮，让所有的测试程序运行起来，你马上就能看到测试结果，几乎不需要在其它任何事情。
当有了测试程序后，修改Bug是怎样进行的？
首先，你需要重现这个Bug。无论如何，在你修改前，你必须要认定这个Bug是否真实的存在。如何做到这些？你要写出一个测试用例来重现这个bug，这个必须要在你做任何的修改这个bug的工作之前完成。
如果这个bug不能重现，问题就可能出自其它地方，如果不能用自动化测试来重现这个bug，你可能在错误的地方修改了这个bug，很可能改坏了你的程序。当你写出测试程序，你必须先运行它确保它会失败。如果测试没有失败，什么地方可能出了问题，你没能正确的重现它。
当你修改了这个Bug，你也有了针对它的测试程序，你可以立即发现这个bug是否还会出现。
当你这时又发现另外一个bug时该怎么做？
相同的做法。写一个测试程序，重现这个bug。即使你没有时间来立即修正这个bug或者这不是个致命的bug，你也应该有个能够让它重现的测试程序，当日后你回来解决这个问题时，你就能知道该做什么了。
[英文原文：Testing is waste of time, I know that my code works ] 此条目发表在心得体会分类目录，贴了测试, 测试驱动开发标签。将固定链接加入收藏夹。  •  分享这篇文章
  •  新浪微博
  •  QQ空间
  •  腾讯微博
  •  人人网
  •  更多分享方式
  •  105
  •  « 上一篇
  •  |
  •  下一篇 »
你也许会喜欢这些文章：
  •  软件测试不是一个功能
  •  代码覆盖率：80%，不能少
  •  如何成为Python高手
  •  测试人员是…
  •  一本好书：《谷歌如何测试软件》
《“测试是浪费时间，我的程序肯定没问题”》有 8 条评论
  •  the5fire的技术博客说： 2011年01月10日7:11 上午
测试确实是重要的一环内容
回复  •  gcyy0106说： 2011年01月10日8:38 上午
讨厌测试
回复  •  wugee说： 2011年01月10日4:28 下午
测试无乐趣，而且烦。
回复  •  jssay说： 2011年01月10日11:34 下午
测试很重要，却经常被忽视，不是我们不想做，而是客观条件不允许啊！
回复  •  dagon说： 2011年01月16日12:39 上午
没人否定测试很重要，但是客观、主观上的原因导致大部分的项目都没有比较完整的单元测试代码
回复  •  3pei说： 2011年01月17日10:07 下午
真可笑，又是这种文章。
随便挑一个：“你必须手工的检查所有的东西来确保你在修正一个Bug时不会引入其它的错误”，扯淡，夸张地说，我有一万个办法来确保这件事，恰恰有限的测试却不能保证什么。
回复  •  一天说： 2011年01月19日5:22 下午
TDD是好东西，单元测试是防火墙。
回复  •  时刻不得闲说： 2011年01月19日7:39 下午
单元测试还是算了吧。这是一个项目组共同努力的事情。比如架构组这里没设计异常处理模块，对于密密麻麻嵌入在代码中的异常中断，写测试驱动很降士气的。
回复发表评论 取消回复
电子邮件地址不会被公开。 必填项已用*标注
姓名 * 
电子邮件 * 
站点 
评论
您可以使用这些HTML标签和属性： <a href="" title=""> <abbr title=""> <acronym title=""> <b> <blockquote cite=""> <cite> <code> <del datetime=""> <em> <i> <q cite=""> <strike> <strong> 
  发表评论    1226    0  
  a6f9eee8f0  
  •  
  •  
文章分类
  •  Java评论
  •  创业理想
  •  团队建设
  •  幽默讽刺
  •  心得体会
  •  思想人生
  •  批评评论
  •  技术技巧
  •  敏捷开发
  •  文档手册
  •  新闻资讯
  •  杂项
  •  求职招聘
  •  移动开发
  •  软件工具
  •  
最受欢迎的文章
  •  198   陳一鳴 barack_obama  
做正确的事情，等着被开除
  •  111   面向对象编程  
面向对象编程从骨子里就有问题——看看名人大家是如何吐槽面向对象的
  •  140   加班  
员工辞职是为了炒老板(管理者)鱿鱼，而不是不满意公司
  •  132   大桥  
双桥故事
  •  107   疯狂的世界  
疯狂的编程世界
  •  318   Daisy  
要死的人都后悔些什么
  •  192 
漫画：告诉你为什么Web开发人员如此的讨厌IE6
  •  232 
Facebook停机事件详细技术内幕
  •  167 
我不是天才
  •  202   image-1-for-mirror-works-co  
程序员？还是小丑？
  •  144   community_thumb  
四件在我步入职业软件开发生涯那天起就该知道的事情
  •  423   U3834P42DT20120606152858  
珍妮的故事
  •  256 
程序员漫画四幅：要钱还是要命？
  •  110 
Google+开发团队分享经验
  •  108   Rob Pike  
最有价值的编程忠告(来自贝尔实验室Plan 9操作系统的创始人Rob Pike)
  •  254 
一个老程序员的建议
  •  177   生活  
大多数人都生活在缺省状态中
  •  792   Mark CC and SS  
谷歌是如何做代码审查的
  •  158   iran_monkey_space_16_06_11  
为什么程序员会被当作异类
  •  111   photo  
十亿美元买不来这样的广告
  •  
外刊IT评论
  •  Today
  •  Monday
  •  Sunday
  •  Saturday
  •  Friday
  •  Thursday
  •  Wednesday
网站导航
  •  首页 
  •  全部文章
  •  关于本站
  •  联系我们
特色栏目
  •  十大传文
  •  十大评论
  •  编程视频
  •  全部文章
订阅我们
  •  RSS订阅
  •  邮件订阅
关注我们  •  新浪微博
  •  腾讯微博
  •  Twitter
  •  RSS
You had mail. Paul read it, so ask him what it said.
  知识共享许可协议  
本作品采用知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议进行许可。
 备案信息：京ICP备12002735号   京公网安备11010802009600号
