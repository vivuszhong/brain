                    YAML_百度百科
新闻网页贴吧知道音乐图片视频地图百科文库
  YAML    进入词条    搜索词条    1    1    utf8  帮助  •  首页
  •  分类频道
  •  特色百科
  •  玩转百科
  •  百科用户
  •  百科校园
  •  百科合作
  •  手机百科
  •  个人中心
  •  自然
  •  文化
  •  地理
  •  历史
  •  生活
  •  社会
  •  艺术
  •  人物
  •  经济
  •  科技
  •  体育
  •  数字博物馆
  •  完善词条
  •  导师计划
  •  优秀词条
  •  百科商城
  •  编修院
  •  蝌蚪团
切换到宽屏切换到窄屏 编辑 有用+1YAML
YAML是一种直观的能够被电脑识别的数据序列化格式，并且容易被人类阅读，容易和脚本语言交互。目 录
1基本信息
  •  1.1 概念
  •  1.2 诞生
  •  1.3 命名
  •  1.4 功能
2格式
  •  2.1 多行缩进
  •  2.2 单行缩写
3适用场景
  •  3.1 脚本语言
  •  3.2 序列化
  •  3.3 配置文件
4语言比较
  •  4.1 JSON
  •  4.2 XML和SDL
  •  4.3 缩排划界
  •  4.4 非阶层式的资料模型
  •  4.5 实际的考量
  •  4.6 安全性
  •  4.7 资料处理和呈现
5函式库
  •  5.1 移植性
  •  5.2 C语言
  •  5.3 Perl
  •  5.4 PHP
  •  5.5 Python
  •  5.6 Ruby
  •  5.7 Java
  •  5.8 R
  •  5.9 JavaScript
  •  5.10 .NET
  •  5.11 OCaml
  •  5.12 C++
  •  5.13 Objective-C
  •  5.14 Lua
  •  5.15 Haskell
  •  5.16 XML
  •  5.17 常见错误与使用细节
6宿主语言
  •  6.1 相关概念
  •  6.2 讨论
1基本信息
概念
YAML（IPA: /ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达资料序列的编程语言。[1] YAML是一种很简单的类似于XML的数据描述语言，语法比XML简单很多。诞生
YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822。 Clark Evans在2001年5月在首次发表了这种语言[2]，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者。命名
YAML是"YAML Ain't a Markup Language"（YAML不是一种置标语言）的递归缩写。 在开发的这种语言时，YAML 的意思其实是："Yet Another Markup Language"（仍是一种置标语言），但为了强调这种语言以数据做为中心，而不是以置标语言为重点，而用返璞词重新命名。功能
YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表，标量等资料形态、。 它使用空白符号缩排和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种设定档、倾印除错内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。 尽管它比较适合用来表达阶层式（hierarchical model）的数据结构，不过也有精致的语法可以表示关联性（relational model）的资料。 由于YAML使用空白字符和分行来分隔资料，使的他特别适合用grep、Python、Perl、Ruby操作。 其让人最容易上手的特色是巧妙避开各种封闭符号，如：引号、各种括号等，这些符号在巢状结构时会变得复杂而难以辨认。[1]2格式
多行缩进
数据结构可以用类似大纲的缩排方式呈现，结构通过缩进来表示，连续的项目通过减号“-”来表示，map结构里面的key/value对用冒号“:”来分隔。样例如下： house:family:name: Doeparents:- John- Janechildren:- Paul- Mark- Simoneaddress:number: 34street: Main Streetcity: Nowheretownzipcode: 12345注意：   •  字串不一定要用双引号标识； 
  •  在缩排中空白字符的数目并不是非常重要，只要相同阶层的元素左侧对齐就可以了（不过不能使用TAB字符）； 
  •  允许在文件中加入选择性的空行，以增加可读性； 
  •  在一个档案中，可同时包含多个文件，并用“——”分隔； 
  •  选择性的符号“...”可以用来表示档案结尾（在利用串流的通讯中，这非常有用，可以在不关闭串流的情况下，发送结束讯号）。 
单行缩写
YAML也有用来描述好几行相同结构的数据的缩写语法，数组用'[]'包括起来，hash用'{}'来包括。因此，上面的这个YAML能够缩写成这样: house:family: { name: Doe, parents: [John, Jane], children: [Paul, Mark, Simone] }address: { number: 34, street: Main Street, city: Nowheretown, zipcode: 12345 }3适用场景
脚本语言
由于实现简单，解析成本很低，YAML特别适合在脚本语言中使用。列一下现有的语言实现：Ruby，Java，Perl，Python，PHP，OCaml，JavaScript，除了Java，其他都是脚本语言。序列化
YAML比较适合做序列化。因为它是宿主语言数据类型直转的。配置文件
YAML做配置文件也不错。写YAML要比写XML快得多(无需关注标签或引号)，并且比ini文档功能更强。 比如Ruby on Rails的配置就选用的YAML。对ROR而言，这很自然，也很省事. 由于兼容性问题，不同语言间的数据流转建议不要用YAML.4语言比较
虽然YAML是参考JSON，XML和SDL等语言，不过跟这些语言比起来，YAML仍有自己的特色。[1]JSON
JSON的语法是YAML1.2版的子集，同时非常接近YAML1.0与1.1版的子集，因此大部分的JSON文件都可以被YAML的剖析器剖析。这是因为JSON的语法结构和YAML的内置格式相同。虽然大范围的分层也可以使用类似JSON的内置格式，不过这并YAML标准并不建议这样使用，除非这样编写能让文件可读性增加。YAML的许多扩展在JSON是找不到的，如：进阶资料形态、关系锚点、字串不需要双引号、映射资料形态会储存键值的顺序。XML和SDL
XML和SDL标签概念，在YAML中是找不到的。对于数据结构序列（尽管这是有争议的），标签属性的特色就是可以将资料及复杂资料附加资讯分离，并将各种原生数据结构（如：杂凑表、阵列）用同一种语言表示。YAML则以资料的可扩展性作为替代。（包括为了模拟物件的类别型态）在YAML本身的规范中，并没有类似XML的语言定义文件刚要（language-defined document schema descriptors）──例如验证自己本身的结构是否正确的文件。不过，YAML纲要描述语言（YAML schema descriptor language）是存在的。另外还有YAXML──用XML描述YAML的结构──可以让XML Schema与XSLT转换程式应用在YAML之上。况且，在一般使用的情况下，YAML丰富的定义型态之语法已经提供了足够的方式来辨认YAML文件是否正确。缩排划界
由于YAML的运作主要依赖大纲式的缩排来决定结构，这有效解决了界定符冲突（Delimiter collision）的问题。YAML的资料形态不依赖引号之特点，使的YAML文件可以利用区块，轻易的插入各种其他类型文件，如：XML、SDL、JSON，甚至插入另一篇YAML。 相反的，要将YAML置入XML或SDL中时，需要将所有空白字符和位势符号（potential sigils，如：<,>和&）转换成实体语法；要将YAML置入JSON中，需要用引号框住，并转换内部的所有引号。非阶层式的资料模型
跟SDL、JSON等，每个子结点只能有单一一个父节点的阶层式模型不同，YAML提供了一个简单的关系体制，可以从树状结构的其他地方，重复相同的资料，而不必显示那些冗余的结构。这点和XML中的IDRef类似，YAML剖析器在将YAML转换成物件时，会自动将那些参考资料的结构展开，所以程式在使用时并不会查觉到哪些资料是解码自这种结构。XML则不会将这种结构展开。这种表示法可以增加程式的可读性，并且，在那种“大部分参数维持和上次相同，只有少数改变”的设定档及通讯协定中，可以减少数据输入错误。一个例子是：“送货地点”和“购买地点”在发票的纪录中几乎都是相同的资料。实际的考量
YAML是“行导向的”，因此，就算想由现有程序的混乱输出，转换成YAML格式，并保留大部分的原始文件之外观，也非常简单。因为他不需要平衡封闭的标签、括号及引号，可以从很简单的利用程式，从报表产生YAML。同样，空格分隔可让使用行导向的命令如：grep、Awk、perl、ruby，和Python，来应急性的过滤YAML文件时更加方便。 特别是与标记语言不同的，连续的YAML区块导向往往是格式良好的YAML文件本身。这使得很容易撰写那种“在开始提取的具体记录之前，不需要‘读取全部文件内容’”的解析器（通常需要平衡起始和关闭标签、寻找引号和跳脱字符）。当处理一个单一静态的，整个存在内存中的数据结构将很大，或为提取一个项目来重建的整个结构，代价相当昂贵的记录档，这种特性是相当方便的。 值得讨论的是，尽管它的缩排方式似乎复杂化了深度很大的巢状层次，YAML将缩排视为一个单一的空白，这可能会取得比其他标记语言更好的压缩比。此外，极深的缩排可以完全避免的是：   •  使用“内置格式”（即简称类JSON格式）而无缩排； 
  •  使用关联锚点展开阶层以形成一个摊平的格式，使得YAML解析器能透明地重组成完整的数据结构。 
安全性
YAML是纯粹用来表达资料的语言，所以内部不会存代码注入的可执行命令。这代表剖析器会相当（至少）安全的解析文件，而不用担心潜在与执行命令相关的安全漏洞。举例来说，JSON是JavaScript的子集，使用JavaScript本身的剖析器是相当诱人的，不过也造成许多代码注入的漏洞。虽然在所有资料序列语言中，安全解析本质上是可能的，但可执行性却正是这样一个恶名昭彰的缺陷；而YAML缺乏相关的命令语言，可能相对安全。资料处理和呈现
XML和YAML规范提供非常不同的逻辑模型来进行资料结点的展现、处理及储存。5函式库
移植性
简单的YAML档案（例如：简单的键值对）不需要完整的YAML剖析器，便可以被RegEx解析。许多常用的编程语言──纯用某个语言，让函式库具有可携性──都有的YAML的产生器和剖析器。当效能比较重要时，也有许多和C语言绑定的函式库可使用。C语言
  •  libYAML 
2007-06时，这个YAML的函式库渐趋稳定，并被YAML格式作者推荐使用[13]。   •  SYCK 
这个实现支持大部分1.0版的格式，并且被广泛的使用。它使用高阶interpreted languages进行最佳化。在2005之后，这个专案已经不再更新，不过仍可使用。Perl
  •  YAML:: 
一个通用的接口，被数个YAML剖析器使用。   •  YAML::Tiny 
YAML简化版的实现。拥有小巧轻快的优点──比完整功能的YAML实现快上许多──并用纯Perl写成。   •  YAML::Syck 
与SYCK函式库绑定。提供快速，highly featured的YAML剖析器。   •  YAML::XS 
与LibYaml绑定。提供1.1版更好的相容性。PHP
  •  Spyc 
纯PHP的实现。   •  PHP-Syck 
与SYCK函式库绑定。   •  sfYaml 
为symfony项目重写的Spyc, 可独立使用， 可以产生和剖析YAML文件。Python
  •  PyYaml 
纯Python，或可选用LibYAML的函式库。   •  PySyck 
与SYCK绑定。Ruby
从1.8版开始，YAML剖析器成为标准函式库之一。以SYCK为基础。   •  Ya2YAML 
with full UTF-8 supportJava
  •  jvyaml 
以Syck为基础，and patterned off ruby-yaml   •  JYaml 
纯Java的实现。R
  •  CRAN YAML 
以SYCK为基础。JavaScript
原生的JavaScript即可产生YAML，但不能剖析。   •  YAML JavaScript 
产生和剖析。.NET
待补充。OCaml
  •  OCaml-Syck 
C++
用C++将libYaml包装。Objective-C
  •  Cocoa-Syck 
Lua
  •  Lua-Syck 
Haskell
  •  Haskell Reference wrappers 
XML
  •  YAXML 
currently draft only。常见错误与使用细节
  •  编辑器 
建议使用能将跳格字符自动转换成空白字符的编辑器，并且使用定宽度的字型。 编辑器要能正确的处理UTF-8和UTF16编码（或是使用纯ASCII编码──它同时是UTF-8的子集）。   •  字串 
YAML的字串不需使用引号，这可以增加可读性，并避免巢状的跳脱字符。然而，这有时也会导致错误，例如，字串本身是一个暧昧的字眼（像数字或布林值）；或在短句中意外的出现YAML的结构符号（常见的例子是由惊叹号起始的句子，或是包含冒号-空白的句子："!Caca de vaca!"、"Caution: lions ahead"）。这在发布YAML档案时并不造成困扰，但在制作小型指令码和人工编辑档案时，这问题还蛮常出现的。比较好的方法是善用区块符号（"|" or ">"）而不要使用单行字串，来避免这种暧昧的表达示。   •  预期实做的特性 
6宿主语言
相关概念
YAML没有自己的数据类型的定义，而是使用实现语言的数据类型。 例如，上面的那个YAML配置，在不同语言中解析后得到的数据类型并不相同。   •  PHP 
$house = array('family' => array('name' => 'Doe','parents' => array('John', 'Jane'),'children' => array('Paul', 'Mark', 'Simone')),'address' => array('number' => 34,'street' => 'Main Street','city' => 'Nowheretown','zipcode' => '12345'));  •  PYTHON 
house = {family: { name: Doe, parents: [John, Jane], children: [Paul, Mark, Simone] },address: { number: 34, street: Main Street, city: Nowheretown, zipcode: 12345 }}讨论
这一点，有可能是出奇制胜的地方，也可能是一个败笔。如果兼容性保证的不好的话，YAML数据在不同语言间流转会有问题。如果兼容性好的话，YAML就会成为不同语言间数据流通的桥梁。建议YAML官方设立兼容认证机制，每个语言的实现必须通过认证。 假如兼容性没问题的话，YAML就太完美了。轻巧，敏捷，高效，简便，通用。这才是理想中的数据模型。当然就现在而言，这还只是个理想。 参考资料   •   
1．  YAML百科  ．维基百科 ．2013-03-17 [引用日期2013-03-30] ．
  •   
2．  YAML Draft 0.1  ．Yahoo! Tech groups ．2001-05-11 [引用日期2013-03-30] ．
词条标签： 数据格式 如果想投诉，请到百度百科投诉中心；如果想提出意见、建议，请到意见反馈。
词条统计浏览次数：次编辑次数：10次 历史版本最近更新：2013-05-02创建者：lifeibest 词条贡献榜辛勤贡献者：	
	LiuSXwww  为词条改进贡献了复杂版本的用户，被称为辛勤贡献者  	
© 2013 Baidu 使用百度前必读 | 百科协议 | 百度百科合作平台  YAML  	参考资料	

1基本信息1.1概念1.2诞生1.3命名1.4功能2格式2.1多行缩进2.2单行缩写3适用场景3.1脚本语言3.2序列化3.3配置文件4语言比较4.1JSON4.2XML和SDL4.3缩排划界4.4非阶层式的资料模型4.5实际的考量4.6安全性4.7资料处理和呈现5函式库5.1移植性5.2C语言5.3Perl5.4PHP5.5Python5.6Ruby5.7Java5.8R5.9JavaScript5.10.NET5.11OCaml5.12C++5.13Objective-C5.14Lua5.15Haskell5.16XML5.17常见错误与使用细节6宿主语言6.1相关概念6.2讨论登录   YAML    utf8    1    1  查看我的收藏 